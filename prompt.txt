[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle
No unused references
declare types
use "import(/* @vite-ignore */"... when importing dynamically

[COLORS]
🎨 $primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[DEVELOPING FEATURES]
🌈 Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts
│ ├── App.vue
│ ├── assets/
│ ├── boot/
│ ├── components/
│ ├── css/
│ ├── layout/
│ ├── views/
│ ├── router/
│ └── stores/
│ └── tests/
└── public/images/

[STATE MANAGEMENT]
useAppStore: user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[PROGRESS]
Installed modules, setup variable references, configured stores, designed routing and page structures, updated dependencies, now iterating through files and rebuilding structure to follow design specs, reached gui functionality with simple design, created homepage as new launch portal, stitching in components as we go

[PRIMARY FILES]
index.html: Quasar Entry Point
quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json: Configuration files
src/main.ts: Entry point for the Vue application, imports Vue, router, and Pinia store
src/App.vue: Root Vue component
src/stores/useAppStore.ts: Pinia global state management
src/router/index.ts: Calls AppLayout for route layout with meta styling
src/layout/AppLayout.vue: qlayout, creates boundaries between different components (AppHeader, AppSidebar, MainContent, and AppFooter) based on meta styling
src/layout/AppHeader.vue: qHeader, includes sidebar toggles, Project Title from state , login/ link, and login status indicator
src/layout/AppSidebar.vue: q-drawer (Left), imports UnderConstruction view
src/layout/AppSidebar.vue: q-drawer (Right), imports RemoteControl
src/layout/AppFooter.vue: qFooter, text input window, color background filler for later output
src/layout/MainContent.vue: launches main display MagicFrame
src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction, HomePage - end-point static pages
src/views/LoginForm.vue: Demo login interface
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - New Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[CODING GUIDE]
<script lang="ts">
<style scoped "lang=scss"

[COMMENT GUIDE]
// ComponentName.vue - A brief description of the component's purpose and functionality.
// - Key features or requirements specific to the script section (e.g., props, data, methods, computed properties).
// - External components or libraries utilized, along with their purpose, and any important props, events, or methods.

[COMMENT GENERIC EXAMPLE]
// GenericCard.vue - A reusable card component for displaying information in a consistent format.
// - Props: title (String), content (String), imageUrl (String), and isFeatured (Boolean, default: false)
// - Utilizes 'ExternalLibrary' for handling animations; important methods: 'animateIn()' and 'animateOut()'

[FULLY OPERATIONAL]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, ErrorNotFound.vue, UnderConstruction, AccordionGallery

[WORKING BUT SIMPLIFIED]
App.vue(disabled useAppStore), HomePage.vue, index.ts (disabled AppLayout)

[STILL NEED TO STITCH]
useAppStore, AppLayout, AppHeader, AppSidebar, AppSidebar, AppFooter, MainContent, MagicFrame, SplashImage, ScreenCard, LoginForm, RemoteControl

[I've finally got a homepage gui back! It's coming together. I added in an AccordionGallery, and I want to test out my new commenting styling. If you have any feedback on it, please say. Otherwise, I'm going to give you file by file, you give the code a check for consistency and intent, then return the <template> and <script> sections with the new comments and a fresh codespritz entirely based on that comment design. I'm hoping this will tighten up the code process and make it easier to track what each component is doing.]

[AccordionGallery]

[Homepage]
<template>
  <div id="app" :class="{ 'night-mode': nightMode }">
    <header class="header">
      <h1 class="project-title">WonderForge</h1>
    </header>

    <main class="content">
      <h1 class="welcome-title">Welcome to WonderForge</h1>
      <p class="welcome-subtitle">
        A really pleasing GUI sandbox for coding projects
      </p>
      <MagicFrame :cards="generateScreenCards(splashImages)" />
    </main>

    <footer class="footer">
      <div class="footer-links">
        <a href="#">Cafe Fred</a>
        <a href="#">Cafe Purr</a>
      </div>
      <div class="toggle-container">
        <button class="toggle-button" @click="toggleNightMode">
          Toggle Night Mode
        </button>
      </div>
      <div class="copyright">
        &copy; 2023 Silas Knight. All rights reserved.
      </div>
    </footer>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref } from 'vue';
import MagicFrame from '@/views/MagicFrame.vue';

export default defineComponent({
  name: 'HomePage',
  components: {
    MagicFrame
  },
  setup() {
    const nightMode = ref(false);
    const imagePaths = [
      '../../assets/splash/splash00.png'
      // Other images...
    ];

    const imageImports = imagePaths.reduce((acc, path) => {
      acc[path] = import(path).catch(error => {
        console.error(`Failed to load ${path}:`, error);
      });
      return acc;
    }, {});

    const splashImages = imagePaths.map((path, index) => {
      return {
        id: index + 1,
        src: imageImports[path]?.default,
        alt: index < 2 ? `Splash Image 0${index}` : `Secret Image 0${index - 2}`
      };
    });

    const toggleNightMode = () => {
      nightMode.value = !nightMode.value;
    };

    const generateScreenCards = images => {
      return images.slice(0, 2).map((image, index) => ({
        id: index,
        width: 300, // Set default width
        height: 200, // Set default height
        imageSrc: image.src,
        imageAlt: image.alt
      }));
    };

    return {
      nightMode,
      splashImages,
      toggleNightMode,
      generateScreenCards
    };
  }
});
</script>

<style scoped lang="scss">
/* Typography */
.project-title {
  font-size: 2rem;
  font-weight: 700;
}

.welcome-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
}

.welcome-subtitle {
  font-size: 1.2rem;
  font-weight: 400;
  margin-bottom: 2rem;
}

/* Grid-based layout for the main section */
.content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  justify-content: center;
  align-items: center;
  flex: 1;
  padding: 1rem;
}

/* Footer styling */
.footer {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 1rem;
}

.footer-links {
  display: flex;
  gap: 1rem;
}

.footer-links a {
  color: inherit;
  text-decoration: none;
}

.footer-links a:hover {
  text-decoration: underline;
}

.toggle-container {
  display: flex;
}

.toggle-button {
  background-color: $primary;
  border: none;
  color: white;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s;
}

.toggle-button:hover {
  background-color: $secondary;
}

.copyright {
  font-size: 0.8rem;
}

/* Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

#app {
  animation: fadeIn 1s;
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.header,
.footer {
  height: 10%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.content {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.night-mode {
  background-color: #333;
  color: #f0f0f0;
}

.toggle-button {
  background-color: #007bff;
  border: none;
  color: white;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
}

.toggle-button:hover {
  background-color: #0056b3;
}
</style>
