Hi, ChatGPT! I'm Silas. I have a vue.js project.
I'm building a gui development lab that I can use to develop future tools.
My goal is to make something that will allow me to chain api calls to natural language processors
with a friendly and pleasing interface that also looks great as a portfolio showpiece.
I have the following structure and I'm trying to follow current best practices:

[Project]
WonderForge
WonderForge

[INTENT]
An inviting sandbox to make  and chain programmatic api calls
An inviting sandbox to make  and chain programmatic api calls

[Dev Environment]
Ubuntu 22, Visual Studio Code, Chrome, Node LTS 18.15.0

[MODULES]
Vue 3, TypeScript, SASS, Quasar, Vuex

[STANDARDS]
Material Design, Composition API, Prettify, SASS

[ICONSET]
fontawesome-v6

[ADDITIONAL GOALS]
Step-Based Save System
User Logins
night Mode
livechat
openai secure key storage
chatgpt chat
build suite of playspace tools to showcase playspace like superball cannon, graffiti sprapaint, secret 2d adventure mode, bouncing balls, destructile screen effects, anything that is silly and fun. I can use more ideas!
Toolshed -Draggable, droppable, and resizable icons such as drop-down selections, buttons, wires, and data displays
Toolshed -Draggable, droppable, and resizable icons such as drop-down selections, buttons, wires, and data displays

[Supported File Types]
txt, yaml, json, jpg, png, wmv, mp4, db, pdf
txt, yaml, json, jpg, png, wmv, mp4, db, pdf

[NOTES]
All colors should reference their Quasar preset variables: $primary, $secondary, $accent, $dark, $dark-page, $positive, $negative, $info, $warning
Use a Quasar component if a reasonable option is available
Components should rely on the Vuex store for preset and screen names.
Components should rely on the Vuex store for preset and screen names.

We have:
Installed Quasar CLI, Vue3, SASS
Created App.vue, HeaderWidget.vue, SideWidget.vue, and FooterWidget.vue
created variable references by calling <style lang="scss">
Created NavigationWidget to control screens and presets referenced by VueX store.
Created NavigationWidget to control screens and presets referenced by VueX store.
current Presets are: 'ChatWidget', 'ToolChest', 'PaintBox', 'TextInput', 'DataUpload', 'CardManager'
Please aim for maximum code consistency. avoiding the creation of brittle code due to unnecessary reliance on hardcoded information.
Components should only be aware of preset or screen names if it's essential for their functionality.
Any primary components should follow the FUNCTIONWidget naming scheme., ie ChatWidget
subcomponents should start with new function and end in parent, ie LiveChat




[images]
./public/images/secret/secret00.png-secret09.png
./public/images/splash/splasg00.png-splash09.png

[LAYOUT NOTES]
Mainwidget.vue, the mainscreen display, should never bleed into the other areas
RightScreen, MainScreen, and LeftScreen (aka, two SideWidgets and MainWidget)
should never leave their windows, and especially never trespass header and footer space.
Components are separate except for VueX interactions
FooterWidget.vue is always on the bottom, stretched to both sides


./components/codelab/ (programmatic api chain project)
CodeCard.vue
CardCable.vue
CardManager.vue
CardMat.vue
TextInput.vue
RedSwitch.vue
DataUpload.vue

./components/wonderforge/ (components in development limbo)
LabSpaceWidget.vue
ToolBox.vue

./components/PlaySpace (silly widgets, games, and social chat)
Paintbox.vue
PaintCanvas.vue
SplashWidget.vue
ChatWidget.vue
./components/PlaySpace (silly widgets, games, and social chat)
Paintbox.vue
PaintCanvas.vue
SplashWidget.vue
ChatWidget.vue

[ITERATION]
./src/main.ts
./src/store/index.ts
./src/App.vue
./src/css/quasar.variables.scss
./src/components/HeaderWidget.vue
./src/components/RemoteWidget.vue
./src/components/SideWidget.vue

[STATUS]
We're iterating through each file in the project, ensuring the outputted code adheres to our desired standards and achieves the required functionality. The entry point is App.vue, where we will focus on refining layout sections, previously it was handling communication between screens, any leftover code for this function is undesired.
We are now reiterating back over those files to align them to base functionality and to add the outdated files back in.

The RemoteWidget is not curerntly controlling the screens. App.vue needs to be remodeled, there seems no reason for it to track the preset changes now that we have VueX, correct? I want many components to have access to the presets, and I don't want to be constrained to a three screen setup in the middle. I want one ScreenWidget call, which tells it to load (top, middle, bottom), which tell it to load our HeaderWidget code, MainWidget code, and footer Widget code.

Please iterate that idea so it matches the current design specs and offer suggestions for the next step
