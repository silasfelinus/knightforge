Hi, ChatGPT! I'm Silas Knight. I have a vue.js Quasar project.
I'm building a gui development lab that I can use to develop future tools.
My goal is to make something that will allow me to chain api calls to natural language processors
with a friendly and pleasing interface that also looks great as a portfolio showpiece.
I have the following structure and I'm trying to follow current best practices:

[Project]
WonderForge

[INTENT]
An inviting sandbox to make  and chain programmatic api calls

[Dev Environment]
Ubuntu 22, Visual Studio Code, Chrome, Node LTS 18.15.0

[MODULES]
Vue 3, TypeScript, SASS, Quasar, Vuex

[STANDARDS]
Material Design, Composition API, Prettify, SASS

[ICONSET]
fontawesome-v6

[ADDITIONAL GOALS]
Step-Based Save System
User Logins
night Mode
livechat
openai secure key storage
chatgpt chat
build suite of playspace tools to showcase playspace like superball cannon, graffiti sprapaint, secret 2d adventure mode, bouncing balls, destructile screen effects, anything that is silly and fun. I can use more ideas!
Toolshed -Draggable, droppable, and resizable icons such as drop-down selections, buttons, wires, and data displays

[Supported File Types]
txt, yaml, json, jpg, png, wmv, mp4, db, pdf

[NOTES]
All colors should reference their Quasar preset variables: $primary, $secondary, $accent, $dark, $dark-page, $positive, $negative, $info, $warning
Use a Quasar component if a reasonable option is available
Components should rely on the Vuex store for preset and screen names.

We have:
Installed Quasar CLI, Vue3, SASS
Created App.vue, HeaderWidget.vue, ScreenWidget.vue, and FooterWidget.vue
created variable references by calling <style lang="scss">
Created NavigationWidget to control screens and presets referenced by VueX store.
current Presets are: 'Default', 'ChatWidget', 'ToolChest', 'PaintBox', 'TextInput', 'DataUpload', 'CardManager'
Please aim for maximum code consistency. avoiding the creation of brittle code due to unnecessary reliance on hardcoded information.
Components should only be aware of preset or screen names if it's essential for their functionality.
Any new projects should use the FUNCTIONWidget naming scheme., ie ChatWidget
subcomponents should start with new function and end in parent, ie LiveChat

[images]
./public/images/secret/secret00.png-secret09.png
./public/images/splash/splash00.png-splash09.png

[LAYOUT NOTES]
Mainwidget.vue, the mainscreen display, should never bleed into the other areas
Screens have been essentialized, what was two sidebars and main screen are now three instances of ScreenWidget
ScreenWidgets should never leave their screens, and especially never trespass header and footer space.
Components are separate except for VueX interactions
FooterWidget.vue is always on the bottom, stretched to both sides

./components/labspace/ (programmatic api chain project)
CodeCard.vue
CardCable.vue
CardManager.vue
CardMat.vue
TextInput.vue
RedSwitch.vue
DataUpload.vue

./components/wonderforge/ (components in development limbo)
LabSpaceWidget.vue
ToolBox.vue

./components/playSpace (silly widgets, games, and social chat)
Paintbox.vue
PaintCanvas.vue
SplashWidget.vue
ChatWidget.vue

[ITERATION]
./src/main.ts
./src/store/index.ts
./src/App.vue (qlayout that holds a HeaderWidget, ScreenWidget(left,small,vertical), ScreenWidget(center,large,square), Screenwidget(right,small,vertical) surrounded by a gutter, then FooterWidget. )
./src/css/quasar.variables.scss
./src/components/HeaderWidget.vue
./src/components/RemoteWidget.vue
./src/components/ScreenWidget.vue
./src/components/FooterWidget.vue

[STATUS]

Re-iterating through those files, until we meet basic layout functions. Can you give me a basic outline for how to approach the tasks when I wake up tomorrow?
