Function: A reusable block of code that performs a specific action, can accept input (parameters), and return an output (return value).
Parameter: A variable used in a function's declaration to represent the input passed to the function when it is called.
Argument: A value passed to a function when it is called, corresponding to a specific parameter in the function's declaration.
Variable: A named container used to store a value in memory.
Constant: A named container used to store a value in memory that cannot be changed after it is assigned.
Callback: A function passed as an argument to another function, to be executed later.
Promise: A JavaScript object representing the eventual completion (or failure) of an asynchronous operation, and its resulting value.
Async/Await: Syntax for working with Promises that makes asynchronous code look and behave more like synchronous code.
Component: A reusable and self-contained piece of code that represents a part of the user interface (UI).
Directive: A special attribute added to an element in the template that tells the Vue.js compiler to attach a specified behavior to that element.
Event: An action or occurrence detected by the program, such as a user's interaction or an update in the application state.
Prop: Short for "property," a custom attribute used to pass data from a parent component to a child component.
Lifecycle Hook: A function that gets called at a specific stage of a component's life, allowing you to execute code at specific points in time.
Computed Property: A property that depends on one or more other properties and is automatically updated when any of its dependencies change.
Reactive Data: Data that automatically updates when its dependencies change, causing the UI to update as well.
