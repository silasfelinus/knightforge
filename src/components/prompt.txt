Hi, ChatGPT! I'm Silas Knight.
I'm building a gui development lab using Vue3, Quasar, and Pinia
I have the following structure:

[Project]
WonderForge

[INTENT]
An inviting sandbox to make and chain programmatic API calls with a friendly, pleasing interface that also serves as a portfolio showpiece.

[DEV ENVIRONMENT]
Ubuntu 22, Visual Studio Code, Chrome, Node LTS 18.15.0

[MODULES]
Vue 3, TypeScript, SASS, Quasar, Pinia, VueRouter

[STANDARDS]
Material Design, Prettify, SCSS, Pinia Setup Stores

[ICONSET]
fontawesome-v6

[COLORS]
$primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[FUTUREGOALS]
Step-Based Save System
User Logins
Night Mode
Live Chat
OpenAI Secure Key Storage
ChatGPT Chat
PlaySpace Toys (Superball Cannon, Graffiti Spray Paint, Secret 2D Adventure Mode, Bouncing Balls, Destructible Screen Effects)

[INTENDED FILE TYPES]
txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf

[NOTES]
Use Quasar preset variables for colors
Use Quasar components when available
Use Vuex store for state management
Adhere to current TypeScript standards
Separate concerns by maintaining a clear distinction between data structures and the logic that manipulates them.
Avoid hardcoding data in application logic; instead, use programmatically generated data to ensure flexibility and maintainability.
Always style <style scoped lang="scss">


[LAYOUT]
(qlayout: HeaderWidget; gutter[ScreenWidget(left, small, vertical), ScreenWidget(center, large, square), ScreenWidget(right, small, vertical)]; FooterWidget.)

[LAYOUT NOTES]
ScreenWidgets should not overlap with header and footer
Components should interact only through Vuex
FooterWidget.vue should always be at the bottom, stretched to both sides

[COMPONENTS]
./components/labSpace/ (API Chain Project)
CardCable.vue - logic to connect  Codecards for API chain processing
CardManager.vue - create/edit/delete codecards
CardMat.vue - droppable space for codecards
CodeCard.vue - stylized cards to represent natural language processor api calls
DataUpload.vue - drag-and-drop local file upload
RedSwitch.vue - gui toggle
TextInput.vue - stylized input field for text

./components/playSpace/ (Silly Widgets, Games, Social Chat)
Paintbox.vue - toolbox for paintbrushes
PaintCanvas.vue - gui space for paint effects
SplashWidget.vue - slideshow image viewer
ChatWidget.vue - livechat & chatgpt

[MAIN FILES]
./src/main.ts
./src/store/index.ts
./src/types.ts
./src/App.vue
./src/css/quasar.variables.scss
./src/components/HeaderWidget.vue
./src/components/RemoteWidget.vue
./src/components/useRemoteWidget.ts
./src/components/ScreenWidget.vue
./src/components/ScreenCard.vue
./src/components/FooterWidget.vue

[PINIA STORE: State]
leftScreen, mainScreen, rightScreen: current preset and visibility status per section.
widgetSettings: settings for each preset (title, bgColor).

[PINIA STORE: Getters]
widgetSettings: takes Preset, returns settings.

[PINIA STORE: Actions]
changePreset: changes preset for side (left, main, right).
nextPreset: cycles to next preset for side.
toggleVisibility: toggles visibility of side.
updateWidgetTitle: updates title of preset.
updateWidgetBgColor: updates bgColor of preset.
{Note that in the Pinia setup, there is no separate Mutations section as in Vuex. Actions are used to directly modify the state, and there are no mutations.}

[PROGRESS]
Installed Quasar CLI, Vue3, SASS
Created App.vue, HeaderWidget.vue, ScreenWidget.vue, and FooterWidget.vue
Created Dummy Preset Components
Set up variable references and SCSS styling
Created Vuex store for screen and preset management
Connected App.vue to Vuex store, retrieving leftScreen, mainScreen, and rightScreen from the store.
Updated ScreenWidget side property to use 'left', 'main', and 'right'
Added ScreenCard.vue to visually style the interface screens
added userRemoteWidget.ts to separate gui and logic
Added UnderConstruction.vue for screen testing
WORKING WEBSITE LAYOUT!!!!!!!!! - HeaderWidget, ScreenWidgets, and FooterWidget display on single screen with nested RemoteControl
migrated from Vuex to Pinia
created router/index.ts


[STATUS]
iterating through files, fixing errors, optimizing foundation and integrating with Pinia store.

[INSTRUCTIONS]
All types are to be referenced in types.ts, use index.ts for state management, scss quasar variables for color references
No unnecessary code duplication, find variables programmatically whenever possible.

I just rebuilt routes but the website i
