[INTRODUCTION]
üëã Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
üîß WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
üíª Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
üì¶ npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
üöÄ "quasar dev"  //launch dev mode

[STANDARDS]
üåü Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle
No unused references
declare types
use "import(/* @vite-ignore */"... when importing dynamically

[COLORS]
üé® $primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[DEVELOPING FEATURES]
üåà Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
üìÅ txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
üóÇ WonderForge/
‚îú‚îÄ‚îÄ quasar.config.js
‚îú‚îÄ‚îÄ src/
‚îÇ ‚îú‚îÄ‚îÄ main.ts
‚îÇ ‚îú‚îÄ‚îÄ App.vue
‚îÇ ‚îú‚îÄ‚îÄ assets/
‚îÇ ‚îú‚îÄ‚îÄ boot/
‚îÇ ‚îú‚îÄ‚îÄ components/
‚îÇ ‚îú‚îÄ‚îÄ css/
‚îÇ ‚îú‚îÄ‚îÄ layout/
‚îÇ ‚îú‚îÄ‚îÄ views/
‚îÇ ‚îú‚îÄ‚îÄ router/
‚îÇ ‚îî‚îÄ‚îÄ stores/
‚îÇ ‚îî‚îÄ‚îÄ tests/
‚îî‚îÄ‚îÄ public/images/

[TERMINOLOGY]
Function: A reusable block of code that performs a specific action, can accept input (parameters), and return an output (return value).
Parameter: A variable used in a function's declaration to represent the input passed to the function when it is called.
Argument: A value passed to a function when it is called, corresponding to a specific parameter in the function's declaration.
Variable: A named container used to store a value in memory.
Constant: A named container used to store a value in memory that cannot be changed after it is assigned.
Callback: A function passed as an argument to another function, to be executed later.
Promise: A JavaScript object representing the eventual completion (or failure) of an asynchronous operation, and its resulting value.
Async/Await: Syntax for working with Promises that makes asynchronous code look and behave more like synchronous code.
Component: A reusable and self-contained piece of code that represents a part of the user interface (UI).
Directive: A special attribute added to an element in the template that tells the Vue.js compiler to attach a specified behavior to that element.
Event: An action or occurrence detected by the program, such as a user's interaction or an update in the application state.
Prop: Short for "property," a custom attribute used to pass data from a parent component to a child component.
Lifecycle Hook: A function that gets called at a specific stage of a component's life, allowing you to execute code at specific points in time.
Computed Property: A property that depends on one or more other properties and is automatically updated when any of its dependencies change.
Reactive Data: Data that automatically updates when its dependencies change, causing the UI to update as well.

[STATE MANAGEMENT]
useAppStore: user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[PROGRESS]
Installed modules, setup variable references, configured stores, designed routing and page structures, updated dependencies, created HomePage as new launch portal, added accordion gallery. Now polishing base code outlines and guiding document so we can create a modular, expandable design.

[PRIMARY FILES: description]
index.html: Quasar Entry Point
quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json: Configuration files
src/main.ts: Entry point for the Vue application, imports Vue, router, and Pinia store
src/App.vue: Root Vue component
src/stores/useAppStore.ts: Pinia global state management
src/router/index.ts: Calls AppLayout for route layout with meta styling
src/layout/AppLayout.vue: qlayout, creates boundaries between different components (AppHeader, AppSidebar, MainContent, and AppFooter) based on meta styling
src/layout/AppHeader.vue: qHeader, includes sidebar toggles, Project Title from state , login/ link, and login status indicator
src/layout/AppSidebar.vue: q-drawer (Left), imports UnderConstruction view
src/layout/AppSidebar.vue: q-drawer (Right), imports RemoteControl
src/layout/AppFooter.vue: qFooter, text input window, color background filler for later output
src/layout/MainContent.vue: launches main display MagicFrame
src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction, HomePage - end-point static pages
src/views/LoginForm.vue: Demo login interface
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - New Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view
src/views/ComponentStatus.vue - Admin page to identify working routes and organize components

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[CODING GUIDE]
<script lang="ts">
<style "lang=scss">

[COMMENT GUIDE]
// ComponentName.vue - A brief description of the component's purpose and functionality.
// - Key features or requirements specific to the script section (e.g., props, data, methods, computed properties).
// - External components or libraries utilized, along with their purpose, and any important props, events, or methods.

[COMMENT GENERIC EXAMPLE]
// GenericCard.vue - A reusable card component for displaying information in a consistent format.
// - Props: title (String), content (String), imageUrl (String), and isFeatured (Boolean, default: false)
// - Utilizes 'ExternalLibrary' for handling animations; important methods: 'animateIn()' and 'animateOut()'


[FULLY OPERATIONAL]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, ErrorNotFound.vue, UnderConstruction

[BUG-HUNTING]
AccordionGallery

[WORKING BUT SIMPLIFIED]
App.vue(disabled useAppStore), HomePage.vue, index.ts (disabled AppLayout)

[UNCLASSIFIED]
useAppStore, AppLayout, AppHeader, AppSidebar, AppSidebar, AppFooter, MainContent, MagicFrame, SplashImage, ScreenCard, LoginForm, RemoteControl

[SPRITZED COMMMENTS]
// HomePage.vue - The main landing page for the WonderForge application.
// - Displays a gallery of splash images.
// - Toggle Night Mode button to switch between day and night modes.
// - Images are loaded dynamically using Vite's `/@vite-ignore/` directive.

[REQUEST]
I want help creating a guiding document for what a vue project addition would look like. My goal is to create a structure to read a json and then programmatically create the vue project code  with that guide, in an optimal order. So, perhaps an optimal order would be create script, create template, revise script, revise template, add style, but there needs to be a structure before that to decide what the structure will look like: which functions are local, which will need outside components, which are store calls to global, and which files and components need to be created or modified to add in the project design. The goal is to guide a single page component design that could be added in to my project with minimal stitching, what would such an outline look like, taking in account terminology that I haven't mentioned, best practices for a project at this stage, and my ultimate goal, to create an effective and powerful guiding document to modularly create and add components to my project.
