[INTRODUCTION]
Hi, ChatGPT! I'm Silas Knight.
I'm building a gui development lab using Vue3, Composition API, Quasar, and Pinia.


[PROJECT]
WonderForge

[INTENT]
A sandbox for rapidly protoyping development and coding projects
(with a pleasing interface that also serves as a portfolio showpiece)

[DEV ENVIRONMENT]
Ubuntu 22, Visual Studio Code, Chrome, Node LTS 18.15.0

[MODULES]
Vue 3, TypeScript, ES-Lint, Prettier, SASS, Quasar, Pinia, VueRouter

[STANDARDS]
Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores
Use <style scoped lang="scss">
Use and recommend Quasar components when available
Use Pinia index.ts store for state management
Adhere to current TypeScript standards
Separate concerns
Avoid hardcoding data in application logic

[FORMATTING]
Prettier

[ICONSET]
fontawesome-v6

[COLORS]
$primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[FUTUREGOALS]
Step-Based Save System
User Logins
Night Mode
Live Chat
OpenAI Secure Key Storage
ChatGPT Chat
PlaySpace Toys (Superball Cannon, Graffiti Spray Paint, Secret 2D Adventure Mode, Bouncing Balls, Destructible Screen Effects)

[INTENDED FILE TYPES]
txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[GUIDELINES]
Use Composition API



[DIRECTORY]
WonderForge/
├── src/
│   ├── main.ts
│   ├── App.vue
│   ├── assets/
│   ├── boot/
│   ├── components/
│   ├── css/
│   ├── layouts/
│   ├── pages/
│   ├── router/
│   └── stores/
└── public/
    └── images/

[PRIMARY FOLDERS]
./components/labspace/
./components/screenspace/
./components/playspace/
./router/index.ts
./stores/app.ts
./stores/types.ts
./css/quasar.variables

[LAYOUTS]
/layouts: HeaderWidget.vue, FooterWidget.vue, MainLayout.vue
./pages/: ScreenSet1, ScreenSet2, UnderConstruction, ErrorNotFound

[SSCREENSPACE]
/screenspace: RemoteControl.vue, useRemoteControl.ts, ScreenWidget.vue, ScreenCard.vue, ScreenWidgetWrapper.vue

[LABSPACE]
./components/labSpace/ (API Chain Project)
CardCable.vue - logic to connect  Codecards for API chain processing
CardManager.vue - create/edit/delete codecards
CardMat.vue - droppable space for codecards
CodeCard.vue - stylized cards to represent natural language processor api calls
DataUpload.vue - drag-and-drop local file upload
RedSwitch.vue - gui toggle
TextInput.vue - stylized input field for text

[PLAYSPACE]
./components/playSpace/ (Silly Widgets, Games, Social Chat)
Paintbox.vue - toolbox for paintbrushes
PaintCanvas.vue - gui space for paint effects
SplashWidget.vue - slideshow image viewer
ChatWidget.vue - livechat & chatgpt

[PINIA STORE]
State: leftScreen, mainScreen, rightScreen, widgetSettings
Getters: widgetSettings
Actions: changePreset, nextPreset, toggleVisibility, updateWidgetTitle, updateWidgetBgColor

[PROGRESS]
Installed Quasar CLI, Vue3, SASS
Created App.vue, HeaderWidget.vue, ScreenWidget.vue, and FooterWidget.vue
Created dummy preset components
Set up variable references and SCSS styling
Migrated from Vuex to Pinia
Created router/index.ts
Moved layout components to layouts/
Created ScreenWidgetWrapper
Moved screen elements into components/screenspace
Updated outline and project docs

[STATUS]
We are working together, iterating through files, making sure that we've separated concerns and following our structure.

[SUGGESTED REPLY FORMAT]
a. fun emoticon and fun and inspiring phrase
1. Comment on code and project thus far
2. Improved Code that will work within our structure
3. The file or files you'd like to see next
4. Any Additional comments

[REVIEW HISTORY]
Here's the first page, main.ts:

[main.ts]
import { createApp } from 'vue';
import App from './App.vue';
import router from './router'; // Import the router instance, not the routes
import { createPinia } from 'pinia';

const app = createApp(App);

// Use the router
app.use(router);

// Use the Pinia store
app.use(createPinia());

app.mount('#app');
