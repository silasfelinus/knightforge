Hi, ChatGPT! I'm Silas Knight.
I'm building a gui development lab using Vue3, Quasar, and Pinia
I have the following structure:

[Project]
WonderForge

[INTENT]
An inviting sandbox to make and chain programmatic API calls with a friendly, pleasing interface that also serves as a portfolio showpiece.

[DEV ENVIRONMENT]
Ubuntu 22, Visual Studio Code, Chrome, Node LTS 18.15.0

[MODULES]
Vue 3, TypeScript, SASS, Quasar, Pinia, VueRouter

[STANDARDS]
Material Design, Prettify, SCSS, Pinia Setup Stores

[ICONSET]
fontawesome-v6

[COLORS]
$primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[FUTUREGOALS]
Step-Based Save System
User Logins
Night Mode
Live Chat
OpenAI Secure Key Storage
ChatGPT Chat
PlaySpace Toys (Superball Cannon, Graffiti Spray Paint, Secret 2D Adventure Mode, Bouncing Balls, Destructible Screen Effects)

[INTENDED FILE TYPES]
txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf

[STANDARDS]
Use and recommend Quasar components when available
Use Pinia index.ts store for state management
Adhere to current TypeScript standards
Separate concerns. Maintain a clear distinction between data structures and the logic that manipulates them.
Avoid hardcoding data in application logic; instead, use programmatically generated data to ensure flexibility and maintainability.
Always style <style scoped lang="scss">

[MAIN ENTRY]
./src/main.ts
./src/store/app.ts (pinia store)
./src/types.ts (establishes Presets)
./src/css/quasar.variables.scss (sets color variables)
./src/App.vue (calls HeaderWidget, MainLayout, and Footerwidget)

[LAYOUTS]
/layouts (screen divisions for managing different sections)
HeaderWidget.vue (top boundary maintainer and holder of RemoteControl)
FooterWidget.vue (bottom boundary maintainer and holder of RemoteControl)
MainLayout.vue (maintains layout boundaries for ScreenWidget Wrapper)

[Screenspace]
/screenspace (manipulation of screen elements)
./src/components/RemoteWidget.vue (changes channels on screenwidgets through pinia)
./src/components/useRemoteWidget.ts (old vuex code, needs to be updated to work with pinia setup)
./src/components/ScreenWidget.vue (screen display, might be duplicated by screencard in this setup)
./src/components/ScreenCard.vue (Screenwidget visual styling)
./src/components/ScreenWidgetWrapper.vue (Manages ScreenWidgets)

[UNDEVELOPED COMPONENTS]
[LABSPACE]
./components/labSpace/ (API Chain Project)
CardCable.vue - logic to connect  Codecards for API chain processing
CardManager.vue - create/edit/delete codecards
CardMat.vue - droppable space for codecards
CodeCard.vue - stylized cards to represent natural language processor api calls
DataUpload.vue - drag-and-drop local file upload
RedSwitch.vue - gui toggle
TextInput.vue - stylized input field for text

[PLAYSPACE]
./components/playSpace/ (Silly Widgets, Games, Social Chat)
Paintbox.vue - toolbox for paintbrushes
PaintCanvas.vue - gui space for paint effects
SplashWidget.vue - slideshow image viewer
ChatWidget.vue - livechat & chatgpt

[PAGES]
ErrorNotFound.vue (404 errors)
UnderConstruction.vue (Under construction PAge)

[VIEWS](is this redundant with layout and pages?)
ScreenSet1, ScreenSet2 (presets for the ScreenWidgetWrapper)

[PINIA STORE: State]
leftScreen, mainScreen, rightScreen: current preset and visibility status per section.
widgetSettings: settings for each preset (title, bgColor).

[PINIA STORE: Getters]
widgetSettings: takes Preset, returns settings.

[PINIA STORE: Actions]
changePreset: changes preset for side (left, main, right).
nextPreset: cycles to next preset for side.
toggleVisibility: toggles visibility of side.
updateWidgetTitle: updates title of preset.
updateWidgetBgColor: updates bgColor of preset.

[PROGRESS]
Installed Quasar CLI, Vue3, SASS
Created App.vue, HeaderWidget.vue, ScreenWidget.vue, and FooterWidget.vue
Created Dummy Preset Components
Set up variable references and SCSS styling
Created Vuex store for screen and preset management
Connected App.vue to Vuex store, retrieving leftScreen, mainScreen, and rightScreen from the store.
Updated ScreenWidget side property to use 'left', 'main', and 'right'
Added ScreenCard.vue to visually style the interface screens
added userRemoteWidget.ts to separate gui and logic
Added UnderConstruction.vue for screen testing
WORKING WEBSITE LAYOUT!!!!!!!!! - [HeaderWidget, ScreenWidgets, and FooterWidget display on single screen with nested RemoteControl]
migrated from Vuex to Pinia, [now everything is broken again]
created router/index.ts
moved HeaderWidget, MainLayout, and FooterLayout to layouts/
created ScreenWidgetWrapper to wrap ScreenWidgets

[STATUS]
iterating through files, fixing errors, optimizing foundation to restore gui functionality 2.0 after migrating to pinia and fully redesigning screen
concepts.
Please look over project design, and reply with suggestions for optimizations using this general idea. I am attempting to get back to base function: fully working remotewidgets in header and footer controlling screenwidgets in the main layout.
