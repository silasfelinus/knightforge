[TERMINOLOGY]
Function: A reusable block of code that performs a specific action, can accept input (parameters), and return an output (return value).
Parameter: A variable used in a function's declaration to represent the input passed to the function when it is called.
Argument: A value passed to a function when it is called, corresponding to a specific parameter in the function's declaration.
Variable: A named container used to store a value in memory.
Constant: A named container used to store a value in memory that cannot be changed after it is assigned.
Callback: A function passed as an argument to another function, to be executed later.
Promise: A JavaScript object representing the eventual completion (or failure) of an asynchronous operation, and its resulting value.
Async/Await: Syntax for working with Promises that makes asynchronous code look and behave more like synchronous code.
Component: A reusable and self-contained piece of code that represents a part of the user interface (UI).
Directive: A special attribute added to an element in the template that tells the Vue.js compiler to attach a specified behavior to that element.
Event: An action or occurrence detected by the program, such as a user's interaction or an update in the application state.
Prop: Short for "property," a custom attribute used to pass data from a parent component to a child component.
Lifecycle Hook: A function that gets called at a specific stage of a component's life, allowing you to execute code at specific points in time.
Computed Property: A property that depends on one or more other properties and is automatically updated when any of its dependencies change.
Reactive Data: Data that automatically updates when its dependencies change, causing the UI to update as well.

[RULES]
ComponentNames should always be TwoWord
always use relative pathing
<script lang='ts'>
<style lang='scss'>
No unused references
declare types
use 'import(/* @vite-ignore */...)' when importing dynamically
No empty rulesets

[PRETTIER]
singleQuote: true
semi: true
endOfLine: auto

[COLORS]
ðŸŽ¨ $primary, $secondary, $accent, $dark, $warning, $dark-page, $positive, $negative, $info

[CODING GUIDE]
<script lang="ts">
<style "lang=scss">

[COMMENT GUIDE]

[COMMENT GENERIC EXAMPLE]
// GenericCard.vue - A reusable card component for displaying information in a consistent format.
// - Props: title (String), content (String), imageUrl (String), and isFeatured (Boolean, default: false)
// - Utilizes 'ExternalLibrary' for handling animations; important methods: 'animateIn()' and 'animateOut()'

[NEW COMPONENT OUTLINE]
ComponentName.vue
Purpose and Scope: Briefly describe the component's purpose, functionality, and its relation to the rest of the project.
Component Design: Identify the structure of the component, including its props, data, computed properties, methods, and lifecycle hooks.
Determine which functions are local, which require external components, and which are store calls to global state.
List any dependencies, such as external libraries or child components, and their purpose.
File and Component Modifications: Identify which existing files and components need to be modified in order to integrate the new component.
Specify the necessary changes, such as importing the new component, adjusting global state, or modifying existing components.

[COMPONENT IMPLEMENTATION]
a. Script: <Script lang="ts">, Define the component's TypeScript code using the Composition API, including props, reactive data, computed properties, and methods. Import any necessary external libraries, child components, or store modules.

// ComponentName.vue - A brief description of the component's purpose and functionality.
// - Key features or requirements specific to the script section (e.g., props, data, methods, computed properties).
// - External components or libraries utilized, along with their purpose, and any important props, events, or methods.

b. Template Section: Create the component's template, including all necessary HTML and Vue directives.
Use v-if, v-else, v-for, and other directives as needed to handle conditional rendering and looping.
Bind data and methods to the appropriate DOM elements, using event listeners and watchers as needed.
c. Style Section: Define the component's SCSS styles, following Material Design guidelines and utilizing the predefined color variables.
Ensure responsiveness and adaptability to different screen sizes.

[TESTING][UNDEVELOPED]
Write unit tests for the component using Jest and Vue Test Utils, ensuring correct behavior for various inputs and interactions.

[INTEGRATION]
Integrate the new component into the project, following the specified file and component modifications.

//add to appropriate section(s) of /router/index.ts
import ExampleHomepage from '../example/ExampleHomepage.vue';
  {
    path: '/example-homepage',
    name: 'ExampleHomepage',
    component: ExampleHomepage,
  },

//add to homePage

//Change ComponentStatus to Active in useAppStore/useComponentManager
