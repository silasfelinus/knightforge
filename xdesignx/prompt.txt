[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts
│ ├── App.vue
│ ├── assets/
│ ├── boot/
│ ├── components/
│ ├── css/
│ ├── layout/
│ ├── views/
│ ├── router/
│ └── stores/
│ └── tests/
└── public/images/

[STATE MANAGEMENT: useAppStore.ts]
State:
Getters:
Actions:
user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[TYPES: types.ts]
Interface: User, Screencard, ComponentVisibility

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage, added accordion gallery, moved style and design sections to independent "WonderForge Styleguide", created ExampleProject and ComponentStatus to test routing and component juggling, started on ButterflyMascot and UnderConstruction page.

[CONFIGURATION FILES]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, App.vue, useAppStore.ts, router/index.ts, types.ts

src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction - end-point static pages
src/views/LoginForm.vue: Demo login interface [disabled]
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view
src/views/ComponentStatus.vue - Admin page to identify working routes and organize components
src/butterfly/ButterflyEffectWrapper.vue - Website mascot and inspiration for fancy js effects

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[FULLY OPERATIONAL]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, ErrorNotFound.vue, UnderConstruction, AccordionGallery

[BUG-HUNTING]
ButterflyWrapper

[WORKING BUT SIMPLIFIED]
App.vue(disabled useAppStore), HomePage.vue, index.ts (disabled AppLayout)

[UNCLASSIFIED]
useAppStore, AppLayout, AppHeader, AppSidebar, AppSidebar, AppFooter, MainContent, MagicFrame, SplashImage, ScreenCard, LoginForm, RemoteControl

[SPRITZED COMMMENTS]
// HomePage.vue - The main landing page for the WonderForge application.
// - Displays a gallery of splash images.
// - Toggle Night Mode button to switch between day and night modes.
// - Images are loaded dynamically using Vite's `/@vite-ignore/` directive.

[REQUEST]
Help with this component by walking through steps. We'll make fully new files for each part. Offer help stitching in where appropriate.

[PROJECT OUTLINE]
Project: Rainbow Butterflies
A dynamic and interactive application featuring draggable and droppable screens where butterflies can land.

[COMPONENTS AND REQUIREMENTS]

FullPageWrapper.vue
Purpose: Wraps the entire display for adding visual effects and managing layout.
MagicScreen.vue
Purpose: Create draggable and droppable screens that butterflies can land onto.
Props: screenId (String)
Events: screenDropped (emits screenId)
RainbowButterfly.vue
Purpose: A base component for the butterfly.
Props: butterflyId (String), color (String)
Events: butterflyLanded (emits butterflyId)
ButterflyAnimation.ts
Purpose: Contains the logic for butterfly animations.
Methods: animateFlight(), animateLanding()
ButterflySvg.ts
Purpose: Provides the math and SVG paths for butterfly animations.
Methods: getSvgPath()
ButterflySwarm.vue
Purpose: Handles butterfly interactions and manages their positions on screens.
Reactive Data: butterflies (Array)
Methods: addButterfly(), removeButterfly()
ButterflyManager.vue
Purpose: Provides controls for adding and removing butterflies.
Methods: addButterfly(), removeButterfly()
ScreenManager.vue
Purpose: Provides controls for adding and removing Magic Screens.
Methods: addScreen(), removeScreen()
