[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts
│ ├── App.vue
│ ├── assets/
│ ├── boot/
│ ├── components/
│ ├── css/
│ ├── layout/
│ ├── views/
│ ├── router/
│ └── stores/
│ └── tests/
└── public/images/

[STATE MANAGEMENT: useAppStore.ts]
State:
Getters:
Actions:
user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[TYPES: types.ts]
Interface: User, Screencard, ComponentVisibility

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage as new launch portal, added accordion gallery, moved style and design sections to independent "WonderForge Styleguide", created ExampleProject and ComponentStatus to test routing and component juggling

[CONFIGURATION FILES]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, App.vue, useAppStore.ts, router/index.ts, types.ts

src/layout/AppLayout.vue: qlayout, creates boundaries between different components (AppHeader, AppSidebar, MainContent, and AppFooter) based on meta styling
src/layout/AppHeader.vue: qHeader, includes sidebar toggles, Project Title from state , login/ link, and login status indicator
src/layout/AppSidebar.vue: q-drawer (Left), imports UnderConstruction view
src/layout/AppSidebar.vue: q-drawer (Right), imports RemoteControl
src/layout/AppFooter.vue: qFooter, text input window, color background filler for later output
src/layout/MainContent.vue: launches main display MagicFrame
src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction, HomePage - end-point static pages
src/views/LoginForm.vue: Demo login interface
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - New Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view
src/views/ComponentStatus.vue - Admin page to identify working routes and organize components
src/components/HolographicButterfly.vue - Website mascot and inspiration for fancy js effects

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[FULLY OPERATIONAL]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, ErrorNotFound.vue, UnderConstruction

[BUG-HUNTING]
AccordionGallery

[WORKING BUT SIMPLIFIED]
App.vue(disabled useAppStore), HomePage.vue, index.ts (disabled AppLayout)

[UNCLASSIFIED]
useAppStore, AppLayout, AppHeader, AppSidebar, AppSidebar, AppFooter, MainContent, MagicFrame, SplashImage, ScreenCard, LoginForm, RemoteControl

[SPRITZED COMMMENTS]
// HomePage.vue - The main landing page for the WonderForge application.
// - Displays a gallery of splash images.
// - Toggle Night Mode button to switch between day and night modes.
// - Images are loaded dynamically using Vite's `/@vite-ignore/` directive.

[REQUEST]
Help me polish this component. I need the rest of the piece, and the effect of it flying around the screen. I want a ScreenWidget.NinjaMode option that secretly wraps around the entire screen, and will allow special js effects. Is that...helpful? I don't know if I need those kind of considerations, but
I feel inspired by having the ability to easily call effects by referencing screen location, and at the end of the
website launch, I want the user to be able to move the pieces around on the entire interface, so at that point, the effect will be helpful.

I want my ButterflyMascot.vue (please use new title) to be a beautifully styled butterfly effect using entirely math and js. I want it to flap around the screen, land on the ends of ScreenWidgets and MagicFrames, and swarm with other butterflyMascots. This will be the fancy js effect that I want to highlight on my site, so I want it to be special. It should evoke whimsy and wonder. Think about ways to achieve these affects, suggest more options, give a supercharged pitch for a component design, and then outline steps to generate the design

[Current blueprint ButterflyMascot]
<template>
  <div id="holographic-butterfly">
    <!-- Create a canvas for drawing the butterfly -->
    <canvas ref="canvas" @mousemove="onMouseMove"></canvas>
  </div>
</template>

<script>
export default {
  name: 'HolographicButterfly',
  data() {
    return {
      butterfly: null,
      mouseX: 0,
      mouseY: 0,
    };
  },
  mounted() {
    // Initialize the canvas and create the butterfly
    this.initCanvas();
    this.createButterfly();
  },
  methods: {
    initCanvas() {
      const canvas = this.$refs.canvas;
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    },
    createButterfly() {
      // Create a butterfly with holographic and rainbow effects using math functions
      // See the `createHolographicButterfly` function below
    },
    onMouseMove(event) {
      // Update the mouse coordinates when the mouse moves
      this.mouseX = event.clientX;
      this.mouseY = event.clientY;
    },
    draw() {
      // Draw the holographic butterfly on the canvas
      // See the `draw` function below
    },
  },
};
</script>

<style scoped>
#holographic-butterfly {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
</style>

