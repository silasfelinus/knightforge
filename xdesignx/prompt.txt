[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates interactjs vuedraggable

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts
│ ├── App.vue
│ ├── assets/
│ ├── boot/
│ ├── components/
│ ├── css/
│ ├── layout/
│ ├── views/
│ ├── router/
│ └── stores/
│ └── tests/
└── public/images/

[STATE MANAGEMENT: useAppStore.ts]
State:
Getters:
Actions:
user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[TYPES: types.ts]
Interface: User, Screencard, ComponentVisibility

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage, added accordion gallery, moved style and design sections to independent "WonderForge Styleguide", created ExampleProject and ComponentStatus to test routing and component juggling, started on ButterflyMascot and UnderConstruction page.

[CONFIGURATION FILES]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, App.vue, useAppStore.ts, router/index.ts, types.ts

src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction - end-point static pages
src/views/LoginForm.vue: Demo login interface [disabled]
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view
src/views/ComponentStatus.vue - Admin page to identify working routes and organize components
src/butterfly/ButterflyEffectWrapper.vue - Website mascot and inspiration for fancy js effects

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[REQUEST]
Help with this component by walking through steps. We'll make fully new files for each part. Offer help stitching in where appropriate.

[PROJECT OUTLINE]
Project: Rainbow Butterflies
A dynamic and interactive application featuring draggable and droppable screens where butterflies can land.

[COMPONENTS AND REQUIREMENTS]

*CREATED*FullPageWrapper.vue - Wraps the entire display for adding visual effects and managing layout.
*CREATED* MagicScreen.vue -  Create draggable and droppable screens that butterflies can land onto.
Props: screenId (String)
Events: screenDropped (emits screenId)
RainbowButterfly.vue
Purpose: A base component for the butterfly.
Props: butterflyId (String), color (String)
Events: butterflyLanded (emits butterflyId)
ButterflyAnimation.ts
Purpose: Contains the logic for butterfly animations.
Methods: animateFlight(), animateLanding()
ButterflySvg.ts
Purpose: Provides the math and SVG paths for butterfly animations.
Methods: getSvgPath()
ButterflySwarm.vue
Purpose: Handles butterfly interactions and manages their positions on screens.
Reactive Data: butterflies (Array)
Methods: addButterfly(), removeButterfly()
ButterflyManager.vue
Purpose: Provides controls for adding and removing butterflies.
Methods: addButterfly(), removeButterfly()
ScreenManager.vue
Purpose: Provides controls for adding and removing Magic Screens.
Methods: addScreen(), removeScreen()

[ButterflyPage]
<template>
  <full-page-wrapper>
    <butterfly-swarm></butterfly-swarm>
  </full-page-wrapper>
</template>

<script lang="ts">
import { defineComponent } from 'vue';
import FullPageWrapper from '../layout/FullPageWrapper.vue';
import ButterflySwarm from './ButterflySwarm.vue';

export default defineComponent({
  name: 'ButterflyPage',
  components: {
    FullPageWrapper,
    ButterflySwarm,
  },
});
</script>

<style lang="scss">
.div {
  background: $primary;
}
</style>

<template>
  <div class="butterfly-swarm">
    <RainbowButterfly
      v-for="butterfly in butterflies"
      :key="butterfly.id"
      :butterflyId="butterfly.id"
      :color="butterfly.color"
      :x="butterfly.x"
      :y="butterfly.y"
      @butterflyLanded="handleButterflyLanded"
    />
  </div>
</template>

<script lang="ts">
import { defineComponent, ref } from 'vue';
import RainbowButterfly from './RainbowButterfly.vue';

export default defineComponent({
  name: 'ButterflySwarm',
  components: {
    RainbowButterfly,
  },
  setup() {
    const butterflies = ref([{ id: '1', color: 'red', x: 100, y: 100 }]);

    const addButterfly = (butterfly) => {
      butterflies.value.push(butterfly);
    };

    const removeButterfly = (butterflyId) => {
      butterflies.value = butterflies.value.filter(
        (butterfly) => butterfly.id !== butterflyId
      );
    };

    const handleButterflyLanded = () => {
      // Implement logic when a butterfly lands on a screen
    };

    const moveButterflies = () => {
      butterflies.value = butterflies.value.map((butterfly) => {
        return {
          ...butterfly,
          x: butterfly.x + Math.floor(Math.random() * 21) - 10,
          y: butterfly.y + Math.floor(Math.random() * 21) - 10,
        };
      });
    };

    setInterval(moveButterflies, 1000);

    return {
      butterflies,
      addButterfly,
      removeButterfly,
      handleButterflyLanded,
    };
  },
});
</script>

<template>
  <div class="rainbow-butterfly" @click="emitLanded" :style="positionStyle">
    <svg
      class="butterfly"
      :style="{ fill: color }"
      width="50"
      height="50"
      viewBox="0 0 24 24"
    >
      <path
        d="M21.997 12c0 5.522-4.477 10-9.998 10-5.52 0-10-4.478-10-10 0-5.523 4.48-10 10-10 5.521 0 9.998 4.477 9.998 10zm-9.998-6c-3.314 0-6 2.687-6 6s2.686 6 6 6 6-2.688 6-6-2.686-6-6-6zm1 9h-2v-2h2v2zm0-4h-2v-4h2v4z"
      />
    </svg>
  </div>
</template>

<script lang="ts">
import { defineComponent } from 'vue';

export default defineComponent({
  // ...
  props: {
    butterflyId: {
      type: String,
      required: true,
    },
    color: {
      type: String,
      required: true,
    },
    x: {
      type: Number,
      required: true,
    },
    y: {
      type: Number,
      required: true,
    },
  },
  computed: {
    positionStyle() {
      return {
        left: this.x + 'px',
        top: this.y + 'px',
      };
    },
  },
  methods: {
    emitLanded() {
      this.$emit('butterflyLanded', this.butterflyId);
    },
  },
});
</script>
<style scoped>
.rainbow-butterfly {
  position: absolute;
  transition: all 0.5s ease;
}

.butterfly {
  width: 50px;
  height: 50px;
}
</style>
