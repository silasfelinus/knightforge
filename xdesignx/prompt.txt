[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Step-Based Save System, User Logins, Night Mode, Chat, PlaySpace Toys

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts
│ ├── App.vue
│ ├── assets/
│ ├── boot/
│ ├── components/
│ ├── css/
│ ├── layout/
│ ├── views/
│ ├── router/
│ └── stores/
│ └── tests/
└── public/images/

[STATE MANAGEMENT: useAppStore.ts]
State:
Getters:
Actions:
user, isLoggedIn, nightMode, screenCards, nextCardId, selectedCardIds, stepHistory, componentVisibility, gridWidth, gridHeight, gridCellSize

[TYPES: types.ts]
Interface: User, Screencard, ComponentVisibility

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage as new launch portal, added accordion gallery, moved style and design sections to independent "WonderForge Styleguide", created ExampleProject and ComponentStatus to test routing and component juggling

[CONFIGURATION FILES]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, App.vue, useAppStore.ts, router/index.ts, types.ts

src/layout/AppLayout.vue: qlayout, creates boundaries between different components (AppHeader, AppSidebar, MainContent, and AppFooter) based on meta styling
src/layout/AppHeader.vue: qHeader, includes sidebar toggles, Project Title from state , login/ link, and login status indicator
src/layout/AppSidebar.vue: q-drawer (Left), imports UnderConstruction view
src/layout/AppSidebar.vue: q-drawer (Right), imports RemoteControl
src/layout/AppFooter.vue: qFooter, text input window, color background filler for later output
src/layout/MainContent.vue: launches main display MagicFrame
src/views/MagicFrame.vue: q-page-container, boundary for ScreenCards, utilizes SplashImage for background
src/views/SplashImage.vue: Displays a random background image from the src/assets/splash folder
src/views/ScreenCard.vue: q-card, selectable, resizable, and movable, representing an abstracted API call, utilizes SplashImage for inner display
src/views/: ErrorNotFound, UnderConstruction, HomePage - end-point static pages
src/views/LoginForm.vue: Demo login interface
src/views/RemoteControl.vue: GUI interface to Add, Select, Remove, and Change SplashImage on ScreenCards using useAppStore
src/views/HomePage.vue - New Entry Portal
src/views/AccordionGallery.vue - Displays images in an accordion view
src/views/ComponentStatus.vue - Admin page to identify working routes and organize components

[SUGGESTED REPLY FORMAT]
1. Emoticon and brief project assessment
2. Improved code or request for file(s)
3. Additional comments

[REQUEST]



[FULLY OPERATIONAL]
index.html, quasar.config.js, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, ErrorNotFound.vue, UnderConstruction

[BUG-HUNTING]
AccordionGallery

[WORKING BUT SIMPLIFIED]
App.vue(disabled useAppStore), HomePage.vue, index.ts (disabled AppLayout)

[UNCLASSIFIED]
useAppStore, AppLayout, AppHeader, AppSidebar, AppSidebar, AppFooter, MainContent, MagicFrame, SplashImage, ScreenCard, LoginForm, RemoteControl

[SPRITZED COMMMENTS]
// HomePage.vue - The main landing page for the WonderForge application.
// - Displays a gallery of splash images.
// - Toggle Night Mode button to switch between day and night modes.
// - Images are loaded dynamically using Vite's `/@vite-ignore/` directive.

[REQUEST]
I want help creating a guiding document for what a vue project addition would look like. My goal is to create a structure to read a json and then programmatically create the vue project code  with that guide, in an optimal order. So, perhaps an optimal order would be create script, create template, revise script, revise template, add style, but there needs to be a structure before that to decide what the structure will look like: which functions are local, which will need outside components, which are store calls to global, and which files and components need to be created or modified to add in the project design. The goal is to guide a single page component design that could be added in to my project with minimal stitching, what would such an outline look like, taking in account terminology that I haven't mentioned, best practices for a project at this stage, and my ultimate goal, to create an effective and powerful guiding document to modularly create and add components to my project.
