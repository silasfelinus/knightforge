[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates interactjs

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Gamescreen Interface, interactibles, Asset Management

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts, App.vue
│ ├── assets/audio/
│ ├── assets/images/
│ ├── assets/prompts/
│ ├── boot/
│ ├── components/artgallery/
│ ├── components/assetmanager/
│ ├── components/codecards/
│ ├── components/gamescreen/
│ ├── components/screenfx/
│ ├── css/app.scss
│ ├── css/quasar.variables.scss
│ ├── layout/
│ ├── views/
│ ├── router/index.ts
│ └── stores/projects.ts
│ └── stores/types.ts
└── public/images/

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage layout, beginning voice integration with SpeechKitt, accordion gallery, moved style and design sections to "WonderForge Styleguide", ButterflyMascot interactible, draggable-resizable magicscreen, remodeled router to use lazy loading, Setup HomePage with stylized butterfly wings, app.scss as global scss, with quasar.variables.scss for css variables.

[CONFIG FILES]
index.html, quasar.config.js, app.scss, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, app.vue

[BASE FILES RECREATED]
stores/types.ts
stores/projects.ts
routes/index.ts
HomePage //Home
ErrorScreen //404
ButterflyMascot //website mascot interactible

[CURRENTLY WORKING ON]
LayoutEditor.vue //scss manager


[LEFT TO STITCH IN]
UnderConstruction //Under Construction
TitleBar //stylized title
NavigationMenu //isActive components
AccordionGallery //website configuration
ChatInterface // Chatroom Interface
VoiceControl //basic voice pickup and text output
UserLogin //User Login
SettingsPanel //User Settings
RandomText  //RandomText(parameters)
RandomImage // RandomImage(parameters)
TextInput // Text Input Window

[./components/assetmanager/]
AssetManager  // Asset manager

[./components/codecards/]
CodeCard // Base class for customizable cards


[./components/screenfx/]
RainDrops //background screen effect
LavaLamp //background screen effect
SoapBubbles //background screen effect
SplashImage //background screen effect
MagicFrame //resizeable and draggable stylized window frame
MagicRemote //modular interface controller

[./components/gamescreen/]
GameScreen //modular screen display interface with step-based save system

[./components/artgallery/]
ArtGallery //customizable Art Asset gallery viewer

[NOTE]
I want to avoid outside modules unless they provide a specific desired utility. We are attempting to develop bare metal javascript vue typed code solutions with minimal dependences outside our own codebase. I am always interested in learning about related paradigms that might provide assistance with organizing our data and recovering them programmatically.

[Personality Select]
1. Brainstorm session
2. High Level System Overview
3. Focused Project Outline
4. Step-based instructions
5. Code Review
6. Style Review
7. Critical Analysis of Project
8. Next Steps Project Outline
9. Toggle Text Adventure Quest Mode (status: off)
0. Custom

Selection:
5, I'm rebuilding files.
[stores/types.ts]
// Define the Component interface, which represents the structure of a single component in a project
export interface Component {
  projectName: string;
  componentName: string;
  fileName: string;
  isActive: boolean;
  path: string;
  alias: string;
  importPath: string;
}

// Define the Project interface, which represents the structure of a single project
export interface Project {
  name: string;
  isActive: boolean;
  folder: string;
  // An array of component names as strings, for easy editing and information at a glance
  components: string[];
}

[projects.ts]
// src/stores/projects.ts
import { Project } from './types';

export const projects: Project[] = [
  {
    name: 'layout',
    folder: 'layout',
    isActive: true,
    components: [
      'ForgePage',
      'ErrorScreen',
      //'UnderConstruction',
      //'TitleBar',
      'TestComponent',
      // 'NavigationMenu',
      // 'AccordionGallery',
      // 'RandomText',
      // 'RandomImage',
      // 'TextInput',
      // 'ChatInterface',
      // 'VoiceControl',
      // 'UserLogin',
      // 'SettingsPanel',
    ],
  },
  {
    name: 'screenfx',
    isActive: true,
    folder: 'screenfx',
    components: [
      //'MagicRemote',
      'ButterflyMascot',
      // 'LavaBubble',
      // 'LavaLamp',
      // 'MagicFrame',
      // 'RainEffect',
      // 'SoapBubbles',
      // 'SplashImage',
    ],
  },
  {
    name: 'artgallery',
    folder: 'artgallery',
    isActive: false,
    components: ['ArtGallery', 'GiftShop', 'MembershipClub', 'ShoppingCart'],
  },
  {
    name: 'assetmanager',
    isActive: false,
    folder: 'assetmanager',
    components: [
      'AssetManager',
      'EffectsManager',
      'ToyboxManager',
      'ArtManager',
      'GameManager',
      'PromptDesigner',
      'ProjectManager',
      'CardDesigner',
      'CodeDesigner',
      'ApiManager',
      'SiteDesigner',
      'GalleryDesigner',
      'TaskManager',
    ],
  },
  {
    name: 'codecards',
    isActive: false,
    folder: 'codecards',
    components: [
      'CodeCard',
      'AvatarCard',
      'UserCard',
      'RobotCard',
      'ChatGPTCard',
      'PromptCard',
      'ArtistCard',
      'ArtCard',
      'AlexaCard',
    ],
  },
  {
    name: 'gamescreen',
    isActive: false,
    folder: 'gamescreen',
    components: [
      'GameScreen',
      'MiniPlanet',
      'ChatBot',
      'ArtAcademy',
      'AdventurePanel',
      'CosmosGame',
      'SerendipityGame',
    ],
  },
];

// Create a function that takes a project name and returns the corresponding Project object
export function getProjectByName(projectName: string): Project | undefined {
  return projects.find((project) => project.name === projectName);
}
[componentsGenerator]
// src/componentsGenerator.ts
import { Project, Component } from '@/stores/types';
import { projects } from './projects';

// Create a function to generate the array of Components
function generateComponents(projects: Project[]): Component[] {
  const components: Component[] = [];

  projects.forEach((project) => {
    project.components.forEach((component) => {
      const isActive = project.isActive && !component.startsWith('//');
      const componentName = component.replace(/^\/\//, '');
      const fileName = `${componentName}.vue`;
      const path = componentName
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .toLowerCase();
      const alias = `${project.name}_${componentName}`;
      const importPath = `() => import('@/components/${project.folder}/${fileName}')`;

      components.push({
        projectName: project.name,
        componentName,
        fileName,
        isActive,
        path,
        alias,
        importPath,
      });
    });
  });

  return components;
}

// Export the generated array of Components
export const components: Component[] = generateComponents(projects);


