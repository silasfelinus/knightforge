[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates interactjs

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Prettier, SCSS, Pinia, TypeScript

[PRINCIPLES]
Kaizen, DRY Principle, "Best practices are good; Wise practices are best."

[DEVELOPING FEATURES]
🌈 navigation menu, image gallery

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts, App.vue
│ ├── assets/audio/
│ ├── assets/images/
│ ├── assets/prompts/
│ ├── assets/galleries/
│ ├── assets/photosets/
│ ├── boot/
│ ├── components/artgallery/
│ ├── components/assetmanager/
│ ├── components/codecards/
│ ├── components/gamescreen/
│ ├── components/layout/
│ ├── components/screenfx/
│ ├── css/app.scss
│ ├── css/quasar.variables.scss
│ ├── views/
│ ├── router/index.ts
│ └── stores/componentsGenerator.ts
│ └── stores/projects.ts
│ └── stores/types.ts
└── public/images/

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage layout,  ButterflyMascot interactible, remodeled router to use lazy loading, Setup HomePage with stylized butterfly wings, app.scss as global scss, quasar.variables.scss for css variables, rebuilt files from project up: types, projects, componentgenerator, router

[TODO]
graphic navigation menu
setup API layer, possibly RESTful API

[CONFIG FILES]
index.html, quasar.config.js, app.scss, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, app.vue

[BASE FILES RECREATED]
stores/types.ts
stores/projects.ts
routes/index.ts
HomePage //Home
ErrorScreen //404
UnderConstruction //Under Construction
ButterflyMascot //website mascot interactible
TitleBar //stylized title

[CURRENTLY WORKING ON]
LayoutEditor.vue //scss manager
NavigationMenu //isActive components
AccordionGallery //website configuration
ChatInterface // Chatroom Interface
VoiceControl //basic voice pickup and text output
UserLogin //User Login
SettingsPanel //User Settings
RandomText  //RandomText(parameters)
RandomImage // RandomImage(parameters)
TextInput // Text Input Window
AssetManager  // Asset manager
CodeCard // Base class for customizable cards
RainDrops //background screen effect
LavaLamp //background screen effect
SoapBubbles //background screen effect
SplashImage //background screen effect
MagicFrame //resizeable and draggable stylized window frame
MagicRemote //modular interface controller
GameScreen //modular screen display interface with step-based save system
ArtGallery //customizable Art Asset gallery viewer


[SELECTION MENU]
1. Brainstorm session
2. High Level System Overview
3. Focused Project Outline
4. Step-based instructions
5. Code Review
6. Style Review
7. Critical Analysis of Project
8. Next Steps Project Outline
9. Toggle Text Adventure Quest Mode (status: off)
0. Custom

Selection:
8, I've retooled types, this is a base for the rest of the website structure. I want a management page that lets me view, create, manage data. I'll use that to create structure for the other types. How do I begin?

// Data is our base operating unit for anything tracked by id
export interface Data {
  id: number;
}

// Tags are our high-level concept organization, id + name
export interface Tag extends Data {
  name: string;
}

// FilePath can be remote or local
export interface FilePath extends Data {
  filePath: string;
}

// Image is identified by filepath
// Variables customized for NLP ai processing
export interface Image extends Data {
  fileName: string;
  filePath: string;
  tags?: Tag[];
  positivePrompt?: string;
  negativePrompt?: string;
  photoset?: string;
  modeler?: string;
  height?: number;
  width?: number;
  steps?: number;
  cfg?: number;
  sampler?: string;
  seed?: number;
}

// Modelers make images in a particular style
export interface Modeler extends Tag {
  hash?: string;
  tags?: Tag[];
  localPath?: string;
  infoUrl?: string;
  images: Image[];
}

// Photosets are themed image collections organized by physical folders
export interface Photoset extends Tag {
  src: string;
  concept?: string;
  folderName?: string;
  fullPath?: string;
  tags?: Tag[];
  images?: Image[];
}

// Gallery is a sorted collection of images organized programmatically
export interface Gallery extends Tag {
  name: string;
  tags?: Tag[];
  path?: FilePath;
  images?: Image[];
  photosets?: Photoset[];
  modelers?: Modeler[];
}
