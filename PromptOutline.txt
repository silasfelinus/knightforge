[INTRODUCTION]
👋 Hi, ChatGPT! I'm Silas Knight. We're building an SPA using Vue3, Composition API, Quasar, and Pinia.

[PROJECT]
🔧 WonderForge: GUI sandbox for designing and prototyping coding projects (portfolio showpiece)

[DEV ENVIRONMENT]
💻 Ubuntu 22, VSC, Chrome, Node LTS 18.15.0

[REFERENCE]
Vue3 (https://vuejs.org/guide/introduction.html)
Vue-Router (https://router.vuejs.org/guide/)
Typescript (https://www.typescriptlang.org/)
Babel (https://babeljs.io/)
Jest (https://jestjs.io/docs/getting-started)
Vue3-Jest-Typescript Testing - (https://vuejs.org/guide/scaling-up/testing.html#testing-with-jest)
Quasar CLI (https://quasar.dev/start/quasar-cli)
Pinia (https://pinia.vuejs.org/)

[MODULES]
📦 npm install --save-dev eslint eslint-plugin-prettier prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue @vue/compiler-sfc vue-tsc vue-router pinia quasar sass magic-string@latest npm-check-updates interactjs

[COMMANDS]
"npm run lint -- --fix" //auto-fix prettier
"ncu" && "ncu -u" //update node modules
🚀 "quasar dev"  //launch dev mode

[STANDARDS]
🌟 Material Design, Composition API, Prettier, SCSS, Pinia Setup Stores, TypeScript standards, Kaizen, DRY Principle

[DEVELOPING FEATURES]
🌈 Gamescreen Interface, interactibles, Asset Management

[INTENDED FILE TYPES]
📁 txt, yaml, json, svg, jpg, png, gif, wmv, mp4, db, pdf, webp

[DIRECTORY]
🗂 WonderForge/
├── quasar.config.js
├── src/
│ ├── main.ts, App.vue
│ ├── assets/audio/
│ ├── assets/images/
│ ├── assets/prompts/
│ ├── boot/
│ ├── components/artgallery/
│ ├── components/assetmanager/
│ ├── components/codecards/
│ ├── components/gamescreen/
│ ├── components/screenfx/
│ ├── css/app.scss
│ ├── css/quasar.variables.scss
│ ├── layout/
│ ├── views/
│ ├── router/index.ts
│ └── stores/projects.ts
│ └── stores/types.ts
└── public/images/

[PROGRESS]
Installed modules, basic routing and page structures, created HomePage layout,  ButterflyMascot interactible, remodeled router to use lazy loading, Setup HomePage with stylized butterfly wings, app.scss as global scss, with quasar.variables.scss for css variables, rebuilt files from project up: types, projects, componentgenerator, router.
I've done a lot of planning, and I finally understand vue layout and the design structure. I'm building types as I go. and I can finally say I have a focus on intent, now just polishing access to base assets and rebuilding site. This is an opportunity for significant, rapid momentum, and it's exciting!

[CONFIG FILES]
index.html, quasar.config.js, app.scss, tsconfig.json, postcss.config.js, .eslintrc.js, .prettierrc, package.json, main.ts, app.vue

[BASE FILES RECREATED]
stores/types.ts
stores/projects.ts
routes/index.ts
HomePage //Home
ErrorScreen //404
UnderConstruction //Under Construction
ButterflyMascot //website mascot interactible
TitleBar //stylized title

[CURRENTLY WORKING ON]
LayoutEditor.vue //scss manager
NavigationMenu //isActive components
AccordionGallery //website configuration
ChatInterface // Chatroom Interface
VoiceControl //basic voice pickup and text output
UserLogin //User Login
SettingsPanel //User Settings
RandomText  //RandomText(parameters)
RandomImage // RandomImage(parameters)
TextInput // Text Input Window
AssetManager  // Asset manager
CodeCard // Base class for customizable cards
RainDrops //background screen effect
LavaLamp //background screen effect
SoapBubbles //background screen effect
SplashImage //background screen effect
MagicFrame //resizeable and draggable stylized window frame
MagicRemote //modular interface controller
GameScreen //modular screen display interface with step-based save system
ArtGallery //customizable Art Asset gallery viewer

[NOTE]
I want to avoid outside modules unless they provide a specific desired utility. We are attempting to develop bare metal javascript vue typed code solutions with minimal dependences outside our own codebase. I am always interested in learning about related paradigms that might provide assistance with organizing our data and recovering them programmatically, and understanding the essence and intent of code interactions to follow wise practices. Best practices are good, but wise practices are best. Code should be easy to edit, easy to read, and easy to follow.

[Personality Select]
1. Brainstorm session
2. High Level System Overview
3. Focused Project Outline
4. Step-based instructions
5. Code Review
6. Style Review
7. Critical Analysis of Project
8. Next Steps Project Outline
9. Toggle Text Adventure Quest Mode (status: off)
0. Custom

Selection:
1, I'm working with images. I want something simple. Bare metal access to image files at the router level or equivalent.
I have all image files at @/assets/image/, sorted by galleryname/photoset-XXX.webp. All are 1080p wide webp files, some are square, others various rectangles.

Options I want:
get all galleries in @/assets/images
get all photosets in gallery
get random image from photoset
get random image from any photoset in gallery
Get random image from photoset

Please advise.
